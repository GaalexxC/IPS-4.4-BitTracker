<?xml version="1.0" encoding="UTF-8"?>
<javascript app="bitracker">
 <file javascript_app="bitracker" javascript_location="front" javascript_path="controllers/bitracker" javascript_name="ips.bitracker.main.js" javascript_type="controller" javascript_version="20200" javascript_position="1000200">;( function($, _, undefined){
	&quot;use strict&quot;;

	ips.controller.register('bitracker.front.portal.main', {

		initialize: function () {
			this.on( 'click', '[data-action=&quot;markCategoryRead&quot;]', this.markCategoryRead );
		},

		/**
		 * Marks all files in a category as read, triggering an event on the table
		 *
		 * @param 	{event} 	e 	Event object
		 * @returns {void}
		 */
		markCategoryRead: function (e) {
			e.preventDefault();

			var self = this;

			ips.ui.alert.show( {
				type: 'confirm',
				icon: 'question',
				message: ips.getString('markCategoryAsReadConfirm'),
				subText: '',
				callbacks: {
					ok: function () {
						var url = $( e.currentTarget ).attr('href');

						ips.getAjax()( url, {
							showLoading: true,
							bypassRedirect: true
						})
							.done( function () {
								// Trigger event on the table to hide unread markets
								self.triggerOn( 'core.global.core.table', 'markTableRead' );

								// Hide the link we've just clicked
								ips.utils.anim.go( 'fadeOut', $( e.currentTarget ) );

								ips.ui.flashMsg.show( ips.getString('categoryMarkedRead') );
							})
							.fail( function (jqXHR, textStatus, errorThrown) {
								window.location = url;
							});
					}
				}
			});
		}
	});
}(jQuery, _));</file>
 <file javascript_app="bitracker" javascript_location="admin" javascript_path="controllers/settings" javascript_name="ips.settings.settings.js" javascript_type="controller" javascript_version="20200" javascript_position="1000050">;( function($, _, undefined){
	&quot;use strict&quot;;

	ips.controller.register('bitracker.admin.settings.general.general', {
		alertOpen: false,

		initialize: function () {
			this.on( 'uploadComplete', '[data-ipsUploader]', this.promptRebuildPreference );
			this.on( 'fileDeleted', this.promptRebuildPreference );
		},

		promptRebuildPreference: function (e) {

			if( this.alertOpen )
			{
				return;
			}

			this.alertOpen = true;

			/* Show Rebuild Prompt */
			ips.ui.alert.show({
				type: 'confirm',
				message: ips.getString('bitrackerScreenshotsWatermark'),
				subText: ips.getString('bitrackerScreenshotsWatermarkBlurb'),
				icon: 'question',
				buttons: {
					ok: ips.getString('bitrackerScreenshotsWatermarkYes'),
					cancel: ips.getString('bitrackerScreenshotsWatermarkNo')
				},
				callbacks: {
					ok: function(){
						$('input[name=rebuildWatermarkScreenshots]').val( 1 );
						this.alertOpen = false;
					},
					cancel: function(){
						$('input[name=rebuildWatermarkScreenshots]').val( 0 );
						this.alertOpen = false;
					}
				}
			});
		}

	});
}(jQuery, _));</file>
 <file javascript_app="bitracker" javascript_location="front" javascript_path="controllers/settings" javascript_name="clipboard.min.js" javascript_type="controller" javascript_version="20200" javascript_position="1000100"><![CDATA[/*!
 * clipboard.js v2.0.4
 * https://zenorocha.github.io/clipboard.js
 * 
 * Licensed MIT Â© Zeno Rocha
 */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.ClipboardJS=e():t.ClipboardJS=e()}(this,function(){return function(n){var o={};function r(t){if(o[t])return o[t].exports;var e=o[t]={i:t,l:!1,exports:{}};return n[t].call(e.exports,e,e.exports,r),e.l=!0,e.exports}return r.m=n,r.c=o,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=function(){function o(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(t,e,n){return e&&o(t.prototype,e),n&&o(t,n),t}}(),a=o(n(1)),c=o(n(3)),u=o(n(4));function o(t){return t&&t.__esModule?t:{default:t}}var l=function(t){function o(t,e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o);var n=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(o.__proto__||Object.getPrototypeOf(o)).call(this));return n.resolveOptions(e),n.listenClick(t),n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(o,c.default),i(o,[{key:"resolveOptions",value:function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};this.action="function"==typeof t.action?t.action:this.defaultAction,this.target="function"==typeof t.target?t.target:this.defaultTarget,this.text="function"==typeof t.text?t.text:this.defaultText,this.container="object"===r(t.container)?t.container:document.body}},{key:"listenClick",value:function(t){var e=this;this.listener=(0,u.default)(t,"click",function(t){return e.onClick(t)})}},{key:"onClick",value:function(t){var e=t.delegateTarget||t.currentTarget;this.clipboardAction&&(this.clipboardAction=null),this.clipboardAction=new a.default({action:this.action(e),target:this.target(e),text:this.text(e),container:this.container,trigger:e,emitter:this})}},{key:"defaultAction",value:function(t){return s("action",t)}},{key:"defaultTarget",value:function(t){var e=s("target",t);if(e)return document.querySelector(e)}},{key:"defaultText",value:function(t){return s("text",t)}},{key:"destroy",value:function(){this.listener.destroy(),this.clipboardAction&&(this.clipboardAction.destroy(),this.clipboardAction=null)}}],[{key:"isSupported",value:function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:["copy","cut"],e="string"==typeof t?[t]:t,n=!!document.queryCommandSupported;return e.forEach(function(t){n=n&&!!document.queryCommandSupported(t)}),n}}]),o}();function s(t,e){var n="data-clipboard-"+t;if(e.hasAttribute(n))return e.getAttribute(n)}t.exports=l},function(t,e,n){"use strict";var o,r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=function(){function o(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(t,e,n){return e&&o(t.prototype,e),n&&o(t,n),t}}(),a=n(2),c=(o=a)&&o.__esModule?o:{default:o};var u=function(){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),this.resolveOptions(t),this.initSelection()}return i(e,[{key:"resolveOptions",value:function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};this.action=t.action,this.container=t.container,this.emitter=t.emitter,this.target=t.target,this.text=t.text,this.trigger=t.trigger,this.selectedText=""}},{key:"initSelection",value:function(){this.text?this.selectFake():this.target&&this.selectTarget()}},{key:"selectFake",value:function(){var t=this,e="rtl"==document.documentElement.getAttribute("dir");this.removeFake(),this.fakeHandlerCallback=function(){return t.removeFake()},this.fakeHandler=this.container.addEventListener("click",this.fakeHandlerCallback)||!0,this.fakeElem=document.createElement("textarea"),this.fakeElem.style.fontSize="12pt",this.fakeElem.style.border="0",this.fakeElem.style.padding="0",this.fakeElem.style.margin="0",this.fakeElem.style.position="absolute",this.fakeElem.style[e?"right":"left"]="-9999px";var n=window.pageYOffset||document.documentElement.scrollTop;this.fakeElem.style.top=n+"px",this.fakeElem.setAttribute("readonly",""),this.fakeElem.value=this.text,this.container.appendChild(this.fakeElem),this.selectedText=(0,c.default)(this.fakeElem),this.copyText()}},{key:"removeFake",value:function(){this.fakeHandler&&(this.container.removeEventListener("click",this.fakeHandlerCallback),this.fakeHandler=null,this.fakeHandlerCallback=null),this.fakeElem&&(this.container.removeChild(this.fakeElem),this.fakeElem=null)}},{key:"selectTarget",value:function(){this.selectedText=(0,c.default)(this.target),this.copyText()}},{key:"copyText",value:function(){var e=void 0;try{e=document.execCommand(this.action)}catch(t){e=!1}this.handleResult(e)}},{key:"handleResult",value:function(t){this.emitter.emit(t?"success":"error",{action:this.action,text:this.selectedText,trigger:this.trigger,clearSelection:this.clearSelection.bind(this)})}},{key:"clearSelection",value:function(){this.trigger&&this.trigger.focus(),window.getSelection().removeAllRanges()}},{key:"destroy",value:function(){this.removeFake()}},{key:"action",set:function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"copy";if(this._action=t,"copy"!==this._action&&"cut"!==this._action)throw new Error('Invalid "action" value, use either "copy" or "cut"')},get:function(){return this._action}},{key:"target",set:function(t){if(void 0!==t){if(!t||"object"!==(void 0===t?"undefined":r(t))||1!==t.nodeType)throw new Error('Invalid "target" value, use a valid Element');if("copy"===this.action&&t.hasAttribute("disabled"))throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');if("cut"===this.action&&(t.hasAttribute("readonly")||t.hasAttribute("disabled")))throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');this._target=t}},get:function(){return this._target}}]),e}();t.exports=u},function(t,e){t.exports=function(t){var e;if("SELECT"===t.nodeName)t.focus(),e=t.value;else if("INPUT"===t.nodeName||"TEXTAREA"===t.nodeName){var n=t.hasAttribute("readonly");n||t.setAttribute("readonly",""),t.select(),t.setSelectionRange(0,t.value.length),n||t.removeAttribute("readonly"),e=t.value}else{t.hasAttribute("contenteditable")&&t.focus();var o=window.getSelection(),r=document.createRange();r.selectNodeContents(t),o.removeAllRanges(),o.addRange(r),e=o.toString()}return e}},function(t,e){function n(){}n.prototype={on:function(t,e,n){var o=this.e||(this.e={});return(o[t]||(o[t]=[])).push({fn:e,ctx:n}),this},once:function(t,e,n){var o=this;function r(){o.off(t,r),e.apply(n,arguments)}return r._=e,this.on(t,r,n)},emit:function(t){for(var e=[].slice.call(arguments,1),n=((this.e||(this.e={}))[t]||[]).slice(),o=0,r=n.length;o<r;o++)n[o].fn.apply(n[o].ctx,e);return this},off:function(t,e){var n=this.e||(this.e={}),o=n[t],r=[];if(o&&e)for(var i=0,a=o.length;i<a;i++)o[i].fn!==e&&o[i].fn._!==e&&r.push(o[i]);return r.length?n[t]=r:delete n[t],this}},t.exports=n},function(t,e,n){var d=n(5),h=n(6);t.exports=function(t,e,n){if(!t&&!e&&!n)throw new Error("Missing required arguments");if(!d.string(e))throw new TypeError("Second argument must be a String");if(!d.fn(n))throw new TypeError("Third argument must be a Function");if(d.node(t))return s=e,f=n,(l=t).addEventListener(s,f),{destroy:function(){l.removeEventListener(s,f)}};if(d.nodeList(t))return a=t,c=e,u=n,Array.prototype.forEach.call(a,function(t){t.addEventListener(c,u)}),{destroy:function(){Array.prototype.forEach.call(a,function(t){t.removeEventListener(c,u)})}};if(d.string(t))return o=t,r=e,i=n,h(document.body,o,r,i);throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList");var o,r,i,a,c,u,l,s,f}},function(t,n){n.node=function(t){return void 0!==t&&t instanceof HTMLElement&&1===t.nodeType},n.nodeList=function(t){var e=Object.prototype.toString.call(t);return void 0!==t&&("[object NodeList]"===e||"[object HTMLCollection]"===e)&&"length"in t&&(0===t.length||n.node(t[0]))},n.string=function(t){return"string"==typeof t||t instanceof String},n.fn=function(t){return"[object Function]"===Object.prototype.toString.call(t)}},function(t,e,n){var a=n(7);function i(t,e,n,o,r){var i=function(e,n,t,o){return function(t){t.delegateTarget=a(t.target,n),t.delegateTarget&&o.call(e,t)}}.apply(this,arguments);return t.addEventListener(n,i,r),{destroy:function(){t.removeEventListener(n,i,r)}}}t.exports=function(t,e,n,o,r){return"function"==typeof t.addEventListener?i.apply(null,arguments):"function"==typeof n?i.bind(null,document).apply(null,arguments):("string"==typeof t&&(t=document.querySelectorAll(t)),Array.prototype.map.call(t,function(t){return i(t,e,n,o,r)}))}},function(t,e){if("undefined"!=typeof Element&&!Element.prototype.matches){var n=Element.prototype;n.matches=n.matchesSelector||n.mozMatchesSelector||n.msMatchesSelector||n.oMatchesSelector||n.webkitMatchesSelector}t.exports=function(t,e){for(;t&&9!==t.nodeType;){if("function"==typeof t.matches&&t.matches(e))return t;t=t.parentNode}}}])});]]></file>
 <file javascript_app="bitracker" javascript_location="front" javascript_path="controllers/settings" javascript_name="ips.settings.settings.js" javascript_type="controller" javascript_version="20200" javascript_position="1000100">var clipboard = new ClipboardJS('.ann');

clipboard.on('success', function(e) {
    $('.copied').show();
		$('.copied').fadeOut(1000);
});</file>
 <file javascript_app="bitracker" javascript_location="front" javascript_path="controllers/submit" javascript_name="ips.submit.linkedScreenshots.js" javascript_type="controller" javascript_version="20200" javascript_position="1000150">/**
 *
 * ips.submit.linkedScreenshots.js - Controller to handle linked screenshots
 *
 */
;( function($, _, undefined){
	&quot;use strict&quot;;

	ips.controller.register('bitracker.front.submit.linkedScreenshots', {

		initialize: function () {
			this.on( 'click', '[data-action=&quot;addField&quot;]', this.addFieldButton );
			this.on( 'click', '[data-action=&quot;removeField&quot;]', this.removeField );
			this.setup();
		},

		/**
		 * Setup method
		 *
		 * @returns 	{void}
		 */
		setup: function () {
			var initialValues = $.parseJSON( $(this.scope).attr('data-initialValue') );

			if( initialValues == null )
			{
				return;
			}

			var i;
			for ( i in initialValues.values ) {
				this.addField( i, initialValues.values[i], i == initialValues.default );
			}
		},
		
		/**
		 * Add a field
		 *
		 * @returns 	{void}
		 */
		addField: function ( id, value, isDefault ) {
			$(this.scope).find('[data-role=&quot;fieldsArea&quot;]').append( ips.templates.render( 'bitracker.submit.linkedScreenshot', {
				'name': $(this.scope).attr('data-name'),
				'id': id,
				'value': value,
				'extra': isDefault ? 'checked' : ''
			}) );
		},
		
		/**
		 * Remove a field
		 *
		 * @returns 	{void}
		 */
		removeField: function ( e ) {
			e.preventDefault();
			$(e.currentTarget).closest('li').remove();
		},
		
		/**
		 * Respond to add button
		 *
		 * @returns 	{void}
		 */
		addFieldButton: function () {
			this.addField( 'linked_' + new Date().getTime(), '', false );
		}
	});
}(jQuery, _));</file>
 <file javascript_app="bitracker" javascript_location="front" javascript_path="controllers/submit" javascript_name="ips.submit.main.js" javascript_type="controller" javascript_version="20200" javascript_position="1000150"><![CDATA[/**
 *
 * ips.submit.main.js - Submit controller
 *
 */
;( function($, _, undefined){
	"use strict";

	ips.controller.register('bitracker.front.submit.main', {

		_progressbarTimeout: null,
		_requireScreenshots: false,
		_bulkUpload: false,
		_ui: {},
		_hiddenUploader: false,
		_overriddenUploader: false,

		initialize: function () {
			this.on( 'uploadedCountChanged', this.uploadCounter );
			this.on( 'uploadProgress', this.uploadProgress );
			this.on( 'fileAdded', this.fileAdded );
			this.on( 'fileDeleted', this.fileDeleted );
			this.on( 'click', '[data-action="confirmUrls"]', this.confirmURLs );
			this.on( 'click', '[data-action="confirmImports"]', this.confirmImports );
			this.on( 'click', '[data-action="confirmScreenshotUrls"]', this.confirmScreenshots );
			this.on( 'click', '[data-action="uploadMore"]', this.uploadMore );

			this.setup();
		},

		/**
		 * Setup method - hides necessary sections of the form
		 *
		 * @returns 	{void}
		 */
		setup: function () {
			var self = this;

			if( this.scope.attr('data-screenshotsReq') ){
				this._requireScreenshots = true;
			}

			if( this.scope.attr('data-bulkUpload') ){
				this._bulkUpload = true;
			}

			this._ui = {
				progressBar: this.scope.find('#elTorrentsSubmit_progress'),
				screenshots: this.scope.find('#elTorrentsSubmit_screenshots'),
				fileInfo: this.scope.find('#elTorrentsSubmit_otherinfo')
			};


			var hideProgressBar = function () {
				if( !_.isUndefined( self._ui.progressBar.attr('data-ipsSticky') ) ){
					self.on( 'stickyInit', function () {
						self._ui.progressBar.hide();
					});
				} else {
					self._ui.progressBar.hide();
				}
			};

			// Are there any existing files?
			if( !this._hasExistingFiles() ){
				hideProgressBar();
				this._ui.screenshots.hide();
				this._ui.fileInfo.hide();
				this.scope.find('[data-role="submitForm"]').prop( 'disabled', true );
			} else {
				if( !this.scope.find('input[name^="files_existing"]').length ){
					hideProgressBar();
				} else {
					this.scope.find('#elTorrentsSubmit_uploader .ipsAttachment_dropZone').hide();
					this.scope.find('#elTorrentsSubmit_uploader [data-action="uploadMore"]').show();
					this._hiddenUploader = true;
				}

				if( !this._hasExistingScreenshots() && this._requireScreenshots ){
					this._ui.fileInfo.hide();
					this.scope.find('[data-role="submitForm"]').prop( 'disabled', true );
				}
			}
		},

		/**
		 * Responds to clicking Confirm in the URLs popup. If there's URLs, we show the next steps
		 *
		 * @param 		{event} 	e 		Event object
		 * @returns 	{void}
		 */
		confirmURLs: function (e) {
			e.preventDefault();

			var gotURLs = this._confirmMenu( 'url_files', 'elURLFiles' );

			if( gotURLs ){
				this._doneUploadStep();
			}
		},

		/**
		 * Responds to clicking Confirm in the Import Files popup. If there's files, we show the next steps
		 *
		 * @param 		{event} 	e 		Event object
		 * @returns 	{void}
		 */
		confirmImports: function (e) {
			e.preventDefault();

			var gotImports = this._confirmMenu( 'import_files', 'elImportFiles' );

			if( gotImports ){
				this._doneUploadStep();
			}
		},

		/**
		 * Responds to clicking Confirm in the Import Files popup. If there's files, we show the next steps
		 *
		 * @param 		{event} 	e 		Event object
		 * @returns 	{void}
		 */
		confirmScreenshots: function (e) {
			e.preventDefault();

			var gotURLs = this._confirmMenu( 'url_screenshots', 'elURLScreenshots' );

			if( gotURLs ){
				this._doneScreenshotStep();
			}
		},

		/**
		 * Responds to clicking the 'Upload more files' button
		 *
		 * @param 		{event} 	e 		Event object
		 * @returns 	{void}
		 */
		uploadMore: function (e) {
			e.preventDefault();

			this.scope.find('#elTorrentsSubmit_uploader .ipsAttachment_dropZone').show();
			this.scope.find('#elTorrentsSubmit_uploader [data-action="uploadMore"]').hide();
			this._hiddenUploader = false;
			this._overriddenUploader = true;
		},

		/**
		 * Responds to fileAdded event from the uploader to show the screenshot and/or file information sections
		 *
		 * @param 		{event} 	e 		Event object
		 * @param 		{object} 	data 	Event data object from the uploader
		 * @returns 	{void}
		 */
		fileAdded: function (e, data) {
			if( !this._bulkUpload ){
				if( data.uploader == 'files' ){
					this._doneUploadStep();
				} else if( data.uploader == 'screenshots' ){
					this._doneScreenshotStep();
				}
			} else {
				this.scope.find('[data-role="submitForm"]').prop( 'disabled', false );
			}
		},

		/**
		 * Responds to fileDeleted event from uploader
		 *
		 * @param 		{event} 	e 		Event object
		 * @param 		{object} 	data 	Event data object from the uploader
		 * @returns 	{void}
		 */
		fileDeleted: function (e, data) {
			if( data.uploader != 'files' ){
				return;
			}

			if( data.count === 0 ){
				this.scope.find( '#elTorrentsSubmit_progress .ipsProgressBar_progress')
					.attr('data-progress', '0%')
					.css( {
						width: '0%'
					});

				this.scope.find('#elTorrentsSubmit_uploader .ipsAttachment_dropZone').show();
				this.scope.find('#elTorrentsSubmit_uploader [data-action="uploadMore"]').hide();
				this._hiddenUploader = false;
				this._overriddenUploader = true;
			}
		},

		/**
		 * Responds to uploadCountChanged event from uploader
		 *
		 * @param 		{event} 	e 		Event object
		 * @param 		{object} 	data 	Event data object from the uploader
		 * @returns 	{void}
		 */
		uploadCounter: function (e, data) {
			if( data.uploader != 'files' ){
				return;
			}
		},

		/**
		 * Responds to uploadProgress event from uploader, which we use to adjust the main progressbar
		 *
		 * @param 		{event} 	e 		Event object
		 * @param 		{object} 	data 	Event data object from the uploader
		 * @returns 	{void}
		 */
		uploadProgress: function (e, data) {
			if( data.uploader != 'files' ){
				return;
			}

			var self = this;
			this._showProgress();

			this.scope.find( '#elTorrentsSubmit_progress .ipsProgressBar_progress')
				.attr('data-progress', data.percent + '%')
				.css( {
					width: data.percent + '%'
				});

			if( data.percent === 100 && !this._progressbarTimeout ){
				this._progressbarTimeout = setTimeout( function () {
					self._ui.progressBar.find('.ipsProgressBar').removeClass('ipsProgressBar_animated');
					self._progressbarTimeout = null;
				}, 300 );
			}
		},

		/**
		 * Handles the menus for specifying urls or file paths. If there's values entered, we show a count balloon.
		 *
		 * @param 		{string} 	inputName 		Name of the form fields containing the values
		 * @param 		{string} 	elemID 			ID of the menu trigger button (no #)
		 * @returns 	{boolean}	Returns true if some urls/paths have been entered
		 */
		_confirmMenu: function (inputName, elemID) {
			// Do we have a value?
			var length = 0;
			var invalid = 0;

			this.scope.find('input[name^="' + inputName + '"]').each( function () {
				if( $.trim( $( this ).val() ) ){
					length++;
				} 

				if( !_.isUndefined( this.checkValidity ) && !this.checkValidity() ){
					invalid++;
				}
			});

			if( !invalid ){
				this.scope.find( '#' + elemID ).trigger('closeMenu');
			}

			this.scope.find('#' + elemID + ' [data-role="fileCount"]').text( length );

			if( length ){
				this.scope.find('#' + elemID + ' [data-role="fileCount"]').show();
				return true;
			} else {
				this.scope.find('#' + elemID + ' [data-role="fileCount"]').hide();
				return false;
			}
		},

		/**
		 * Returns true if there are existing files on the form (from upload, url or file path)
		 *
		 * @returns 	{boolean}	Returns true if there are existing files
		 */
		_hasExistingFiles: function () {
			if( this.scope.find('input[name^="files_existing"]').length ){
				return true;
			}

			var hasURL = [];
			var hasImport = [];

			if( this.scope.find('input[name^="url_files"]').length ){
				hasURL = _.filter( this.scope.find('input[name^="url_files"]'), function (item) {
					if( $.trim( $( item ).val() ) != '' ){
						return true;
					}

					return false;
				});
			}

			if( this.scope.find('input[name^="import_files"]').length ){
				hasImport = _.filter( this.scope.find('input[name^="import_files"]'), function (item) {
					if( $.trim( $( item ).val() ) != '' ){
						return true;
					}

					return false;
				});
			}

			if( hasURL.length || hasImport.length ){
				return true;
			}

			return false;
		},

		/**
		 * Returns true if there are existing screenshots on the form (from upload or url)
		 *
		 * @returns 	{boolean}	Returns true if there are existing screenshots
		 */
		_hasExistingScreenshots: function () {
			if( this.scope.find('input[name^="screenshots_existing"]').length ){
				return true;
			}

			var hasURL = [];

			if( this.scope.find('input[name^="url_screenshots"]').length ){
				hasURL = _.filter( this.scope.find('input[name^="url_screenshots"]'), function (item) {
					if( $.trim( $( item ).val() ) != '' ){
						return true;
					}

					return false;
				});

				if( hasURL.length ){
					return true;
				}
			}

			return false;
		},

		/**
		 * Shows the next relevant steps of the upload process
		 *
		 * @returns 	{void}
		 */
		_doneUploadStep: function () {
			var self = this;

			// Show screenshot step
			if( this._ui.screenshots.length && !this._ui.screenshots.is(':visible') ){
				ips.utils.anim.go( 'fadeIn', this._ui.screenshots )
					.done( function () {
						$( document ).trigger('contentChange', [ self._ui.screenshots ] );
					});
			}

			if( !this._requireScreenshots && !this._ui.fileInfo.is(':visible') ){
				ips.utils.anim.go( 'fadeIn', this._ui.fileInfo )
					.done( function () {
						$( document ).trigger('contentChange', [ self._ui.fileInfo ] );
					});
			}
			if( !this._requireScreenshots )
			{
				this.scope.find('[data-role="submitForm"]').prop( 'disabled', false );
			}
		},

		/**
		 * Shows the next relevant steps of the upload process
		 *
		 * @returns 	{void}
		 */
		_doneScreenshotStep: function () {
			var self = this;
			
			ips.utils.anim.go( 'fadeIn', this._ui.fileInfo )
				.done( function () {
					$( document ).trigger('contentChange', [ self._ui.fileInfo ] );
				});

			this.scope.find('[data-role="submitForm"]').prop( 'disabled', false );
		},

		/**
		 * Shows the progress bar and hides the dropzone
		 *
		 * @returns 	{void}
		 */
		_showProgress: function () {
			if( !this._hiddenUploader && !this._overriddenUploader ){
				this._ui.progressBar.show().find('.ipsProgressBar').addClass('ipsProgressBar_animated');
				this.scope.find('#elTorrentsSubmit_uploader .ipsAttachment_dropZone').hide();
				this.scope.find('#elTorrentsSubmit_uploader [data-action="uploadMore"]').show();
				this._hiddenUploader = true;
			}
		}
	});
}(jQuery, _));]]></file>
 <file javascript_app="bitracker" javascript_location="front" javascript_path="controllers/view" javascript_name="ips.view.changeLog.js" javascript_type="controller" javascript_version="20200" javascript_position="1000250"><![CDATA[;( function($, _, undefined){
	"use strict";

	ips.controller.register('bitracker.front.portal.view.changeLog', {

		initialize: function () {
			this.on( 'menuItemSelected', this.changeVersion );
			this.setup();

			// Primary event that watches for URL changes
			History.Adapter.bind( window, 'statechange', _.bind( this.stateChange, this ) );
		},

		/**
		 * Setup method
		 * Sets an initial state that we can use to go back to the default state
		 *
		 * @returns 	{void}
		 */
		setup: function () {
			// Update page URL
			History.replaceState( { 
				controller: 'changelog'
			}, document.title, window.location.href );
		},

		/**
		 * Updates the version changelog being shown
		 *
		 * @param 		{event} 	e 		Event object
		 * @param 		{object} 	data 	Event data object from the menu
		 * @returns 	{void}
		 */
		changeVersion: function (e, data) {
			data.originalEvent.preventDefault();

			var url = data.menuElem.find('[data-ipsMenuValue="' + data.selectedItemID + '"] > a').attr('href');

			// Update page URL
			History.pushState( { 
				controller: 'changelog',
				version: data.selectedItemID
			}, document.title, url );

			this._loadVersion( url, data.menuElem.find('[data-ipsMenuValue="' + data.selectedItemID + '"]').attr('data-changelogTitle') );
		},

		/**
		 * Event handler for History.js
		 * When the state changes, we locate that menu item based on the version, and then pull
		 * the version string and URL and load it
		 *
		 * @returns 	{void}
		 */
		stateChange: function () {
			var state = History.getState();

			// Other things on the page can change the URL, so make sure this is a changelog url
			if( state.data.controller != 'changelog' ){
				return;
			}

			var item;

			if( state.data.version ){
				item = $('#elChangelog_menu').find('[data-ipsMenuValue="' + state.data.version + '"]');
			} else {
				item = $('#elChangelog_menu').find('[data-ipsMenuValue]').first();
			}

			this._loadVersion( item.find('a').attr('href'), item.attr('data-ipsMenuValue') );
		},

		/**
		 * Loads version information
		 *
		 * @param 		{string} 	url 			URL of the version to load
		 * @param 		{string} 	versionTitle 	Title of version being loaded
		 * @returns 	{void}
		 */
		_loadVersion: function (url, versionTitle) {
			var self = this;

			// Update version
			this.scope.find('[data-role="versionTitle"]').text( versionTitle );

			// Set height on info area and set to loading
			this.scope
				.find('[data-role="changeLogData"]')
					.css( {
						height: this.scope.find('[data-role="changeLogData"]').height() + 'px'
					})
					.addClass('ipsLoading')
					.html('');


			// Load the new data
			ips.getAjax()( url )
				.done( function (response) {
					self.scope
						.find('[data-role="changeLogData"]')
							.html( response )
							.removeClass('ipsLoading')
							.css({
								height: 'auto'
							});
					ips.utils.lazyLoad.loadContent( self.scope.find('[data-role="changeLogData"]') );
				})
				.fail( function (jqXHR, textStatus, errorThrown) {
					window.location = url;
				});
		}
		
	});
}(jQuery, _));]]></file>
 <file javascript_app="downloads" javascript_location="front" javascript_path="controllers/view" javascript_name="ips.view.download.js" javascript_type="controller" javascript_version="104063" javascript_position="1000150">/**
;( function($, _, undefined){
	&quot;use strict&quot;;

	ips.controller.register('downloads.front.view.download', {

		initialize: function () {
			this.on( 'click', '[data-action=&quot;dialogClose&quot;]', this.closeDialog );
			this.on( 'click', '[data-action=&quot;selectFile&quot;]', this.selectFile );
			this.on( 'click', '[data-action=&quot;download&quot;]', this.doDownload );
		},

		/**
		 * Agree to the terms and update the display to show the list
		 *
		 * @param 		{event} 	e 		Event object
		 * @returns 	{void}
		 */
		selectFile: function (e) {
			var url = $( e.currentTarget ).attr('href');
			var self = this;

			e.preventDefault();

			// Load the download page
			this.scope
				.html('')
				.css({
					height: '250px'
				})
				.addClass('ipsLoading');

			ips.getAjax()( url )
				.done( function (response) {
					self.scope
						.html( response )
						.css({
							height: 'auto'
						})
						.removeClass('ipsLoading');
				})
				.fail( function (jqXHR, textStatus, errorThrown) {
					window.location = url;
				});
		},
		
		/**
		 * Event handler for the 'cancel' link
		 *
		 * @param 		{event} 	e 		Event object
		 * @returns 	{void}
		 */
		closeDialog: function (e) {
			e.preventDefault();
			this._closeDialog( $( e.currentTarget ).attr('href') );
		},

		/**
		 * Closes the dialog
		 *
		 * @param 		{string} 	href 	Href to redirect to if not in a dialog
		 * @returns 	{void}
		 */
		_closeDialog: function (href) {
			if( this.scope.closest('.ipsDialog').length ){
				this.scope.closest('.ipsDialog').trigger('closeDialog');
			} else {
				window.location = href;
			}
		},

		/**
		 * Initiate the actual download
		 *
		 * @param 		{event} 	e 		Event object
		 * @returns 	{void}
		 */
		doDownload: function (e) {
			var that = this;
			if ( $( e.currentTarget ).attr('data-wait') ) {
				e.preventDefault();
				
				ips.getAjax()( $( e.currentTarget ).attr('href') )
					.done( function (response) {
						var secondsRemaining = response.download - response.currentTime;
						
						$( e.currentTarget )
							.hide()
							.siblings()
								.find('[data-role=&quot;downloadCounter&quot;]')
									.html( secondsRemaining )
								.end()
							.end()
							.siblings('[data-role=&quot;downloadCounterContainer&quot;]')
								.removeClass('ipsHide');
						
						var interval = setInterval( function () {
							secondsRemaining--;
							$( e.currentTarget ).siblings().find('[data-role=&quot;downloadCounter&quot;]').html( secondsRemaining );
							if ( secondsRemaining === 0 ) {
								clearInterval(interval);
								window.location = $( e.currentTarget ).attr('href');
                                that.scope.closest('.ipsDialog').trigger('closeDialog');
							}
						}, 1000 );						
					})
					.fail( function () {
						window.location = $(e.currentTarget).attr('href');
					})
			}
			else
			{
                this.scope.closest('.ipsDialog').trigger('closeDialog');
			}
		}
		
	});
}(jQuery, _));</file>
 <file javascript_app="bitracker" javascript_location="front" javascript_path="templates" javascript_name="ips.templates.submit.js" javascript_type="template" javascript_version="20200" javascript_position="1000050"><![CDATA[/* VIEW TEMPLATES */
ips.templates.set('bitracker.submit.screenshot', " \
	<div class='ipsGrid_span3 ipsAttach ipsImageAttach ipsPad_half ipsAreaBackground_light' id='{{id}}' data-role='file' data-fileid='{{id}}' data-fullsizeurl='{{imagesrc}}' data-thumbnailurl='{{thumbnail}}' data-fileType='image'>\
		<ul class='ipsList_inline ipsImageAttach_controls'>\
			<li><input type='radio' name='{{field_name}}_primary_screenshot' id='{{field_name}}_primary_screenshot_{{id}}' value='{{id}}' title='{{#lang}}makePrimaryScreenshot{{/lang}}' {{#default}}checked{{/default}}></li>\
			<li class='ipsPos_right' data-role='deleteFileWrapper'>\
				<input type='hidden' name='{{field_name}}_keep[{{id}}]' value='1'>\
				<a href='#' data-role='deleteFile' class='ipsButton ipsButton_verySmall ipsButton_light' data-ipsTooltip title='{{#lang}}removeScreenshot{{/lang}}'><i class='fa fa-trash-o'></i></a>\
			</li>\
		</ul>\
		<label for='{{field_name}}_primary_screenshot_{{id}}' class='ipsCursor_pointer'>\
		<div class='ipsImageAttach_thumb ipsType_center' data-role='preview' data-grid-ratio='65' data-action='insertFile' {{#thumb}}style='background-image: url( \"{{thumbnail_for_css}}\" )'{{/thumb}}>\
			{{#status}}\
				<span class='ipsImageAttach_status ipsType_light' data-role='status'>{{{status}}}</span>\
				<span class='ipsAttachment_progress'><span data-role='progressbar'></span></span>\
			{{/status}}\
			{{#thumb}}\
				{{{thumb}}}\
			{{/thumb}}\
		</div>\
		</label>\
		<h2 class='ipsType_reset ipsAttach_title ipsType_medium ipsTruncate ipsTruncate_line' data-role='title'>{{title}}</h2>\
		<p class='ipsType_light'>{{size}} &middot; <span data-role='status'>{{statusText}}</span></p>\
	</div>\
");

ips.templates.set('bitracker.submit.screenshotWrapper', " \
	<div class='ipsGrid ipsGrid_collapsePhone' data-ipsGrid data-ipsGrid-minItemSize='150' data-ipsGrid-maxItemSize='250'>{{{content}}}</div>\
");

ips.templates.set('bitracker.submit.linkedScreenshot', " \
	<li class='cBitrackerLinkedScreenshotItem'>\
		<input type='url' name='{{name}}[{{id}}]' value='{{value}}'>\
		<div class='cBitrackerLinkedScreenshotItem_block'>\
			<input type='radio' name='screenshots_primary_screenshot' value='{{id}}' title='{{#lang}}makePrimaryScreenshot{{/lang}}' data-ipsTooltip {{extra}}>\
		</div>\
		<div class='cBitrackerLinkedScreenshotItem_block'>\
			<a href='#' data-action='removeField' title='{{#lang}}removeScreenshot{{/lang}}' data-ipsTooltip><i class='fa fa-times'></i></a>\
		</div>\
	</li>\
");]]></file>
 <order app="global" path="/dev/js//framework/">templates
common/ips.loader.js
common/ui
common/utils
common
controllers</order>
 <order app="global" path="/dev/js//library/">underscore
jquery
mustache
jstz
IntersectionObserver
Debug.js
app.js</order>
 <order app="global" path="/dev/js//library//jquery">jquery.js
jquery.history.js
jquery.transform.js</order>
 <order app="global" path="/dev/js//library//linkify">linkify.min.js
linkify-jquery.min.js</order>
</javascript>
